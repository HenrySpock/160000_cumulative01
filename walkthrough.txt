
PART 2 SUBPART 2A:
MODELS.JS:
  // async addStory( /* user, newStory */) {
  //   // UNIMPLEMENTED: complete this function!
  // }

  async addStory(user, newStory) {
    const token = user.loginToken;
    const response = await axios.post(
      "https://hack-or-snooze-v3.herokuapp.com/stories",
      { token, story: newStory }
    );
    const storyData = response.data.story;
    const story = new Story(storyData, user.username);
    this.stories.unshift(story);
    user.ownStories.unshift(story);
    return story;
  }

PART 2 SUBPART 2B:
INDEX.HTML:
<!-- PART 2 SUBPART 2B -->
<!-- Add form for creating new story -->
<form id="submit-form" class="hidden">
  <label for="author">Author:</label>
  <input type="text" id="author" name="author" required>
  <label for="title">Title:</label>
  <input type="text" id="title" name="title" required>
  <label for="url">URL:</label>
  <input type="text" id="url" name="url" required>
  <button type="submit">Submit</button>
</form>

<a id="nav-submit" href="#">Submit</a>
 
NAV.JS:
// Add event listener to navbar link for submitting new story
$("#nav-submit").on("click", function(evt) {
  evt.preventDefault();
  if ($submitForm.is(":hidden")) {
    $allStoriesList.hide();
    $submitForm.show();
  } else {
    $submitForm.hide();
  }
  console.log('here')
}); 
 
MAIN.JS:
const $submitForm = $("#submit-form");

function hidePageComponents() {
  const components = [
    $allStoriesList,
    $loginForm,
    $signupForm,
    // PART 2 SUBPART 2B:
    $submitForm
  ];
  components.forEach(c => c.hide());
}

STORIES.JS:
/**
 * Handle submit of the new story form
 */
async function handleSubmit(event) {
  event.preventDefault();
  const $author = $('#author');
  const $title = $('#title');
  const $url = $('#url'); 
  const storyData = {
    title: $title.val(),
    author: $author.val(),
    url: $url.val()
  };
  console.log(storyData);
  await storyList.addStory(currentUser, storyData);
  $author.val('');
  $title.val('');
  $url.val(''); 
  hidePageComponents()
  await getAndShowStoriesOnStart();
}

/**
 * Add an event listener for the new story form submit
 */
$submitForm.on('submit', handleSubmit);


PART 3:
stories.js:
updating the markup:
function generateStoryMarkup(story) {
  const hostName = story.getHostName(); 
  const isFavorited = currentUser && currentUser.favorites.some(fav => fav.storyId === story.storyId);
  const starClass = isFavorited ? "fas" : "far";

  const $star = $(`
    <span class="star">
      <i class="${starClass} fa-star"></i>
    </span>
  `);

  const $storyLink = $(`
    <a href="${story.url}" target="_blank" class="story-link">${story.title}</a>
  `);

  const $storyMeta = $(`
    <small class="story-hostname">(${hostName})</small>
    <small class="story-author">by ${story.author}</small>
    <small class="story-user">posted by ${story.username}</small>
  `);

  if (currentUser) {
    $star.on("click", function() {
      if (isFavorited) {
        currentUser.removeFavorite(story);
        $(this).find("i").toggleClass("fas far");
      } else {
        currentUser.addFavorite(story);
        $(this).find("i").toggleClass("fas far");
      }
      saveUserCredentialsInLocalStorage();
    });
  } else {
    $star.addClass("hidden");
  }

  return $(`
    <li id="${story.storyId}"></li>
  `).append($star, $storyLink, $storyMeta);
}

models.js / class story:
/** Add a favorite story to the list of user favorites and update server. */
 async addFavorite(story) {
  this.favorites.push(story);
  await this._addOrRemoveFavorite("add", story);
}

/** Remove a story from the list of user favorites and update server. */
async removeFavorite(story) {
  this.favorites = this.favorites.filter(s => s.storyId !== story.storyId);
  await this._addOrRemoveFavorite("remove", story);
}

/** Send a request to the API to add or remove a favorite. */
async _addOrRemoveFavorite(action, story) {
  const method = action === "add" ? "POST" : "DELETE";
  await axios({
    url: `${BASE_URL}/users/${this.username}/favorites/${story.storyId}`,
    method: method,
    data: {
      token: this.loginToken
    }
  });
  saveUserCredentialsInLocalStorage();
}

STYLING MATCH:
html/navbar:
<!-- top navigation bar -->
<nav>
  <div class="navbar-brand">
    <a class="nav-link" href="#" id="nav-all">Hack or Snooze</a>
  </div>
  <!-- PART 2 SUBPART 2B -->
  <a class="nav-link" id="nav-submit" href="#">Submit</a>  |  
  <!-- STYLING MATCH -->
  <a class="nav-link" href="#" id="nav-favorites">Favorites</a>  |  
  <!-- STYLING MATCH -->
  <a class="nav-link" href="#" id="nav-my-stories">My Stories</a>
  <div class="nav-right">
    <a class="nav-link" href="#" id="nav-login">login/signup</a>
    <a class="nav-link" href="#" id="nav-user-profile"></a>
    <a class="hidden" id="nav-logout" href="#"><small>(logout)</small></a>
  </div>
</nav>

stories.js:
$('#nav-favorites').on('click', function(evt) {
  evt.preventDefault();
  putFavoritesOnPage();
});

// STYLING MATCH:
function putFavoritesOnPage() { 
  $allStoriesList.empty();
  hidePageComponents();
  // check if the user has any favorites
  if (currentUser.favorites.length === 0) {
    const $noFavorites = $("<p>").text("No favorites to show!");
    $allStoriesList.append($noFavorites);
  } else {
    // loop through all of our user's favorites and generate HTML for them
    for (let story of currentUser.favorites) {
      const $story = generateStoryMarkup(story);
      $allStoriesList.append($story);
    }
  }

  $allStoriesList.show();
}

$('#nav-my-stories').on('click', function(evt) {
  evt.preventDefault();
  putMyStoriesOnPage();
});

function putMyStoriesOnPage() {  
  $allStoriesList.empty();
  hidePageComponents();
  // loop through all of our user's stories and generate HTML for them
  for (let story of currentUser.ownStories) {
    const $story = generateStoryMarkup(story);
    $allStoriesList.append($story);
  }
  $allStoriesList.show();
}


PART 4:
STORIES.JS:
  if (isMyStory) {
    $trashIcon.on("click", function() {
      $story.remove();
      storyList.removeStory(currentUser, story.storyId);
      currentUser.ownStories = currentUser.ownStories.filter(s => s.storyId !== story.storyId);

      // check if there are any stories left after removing the current story
      if (currentUser.ownStories.length === 0) {
        
        const $noStoriesMsg = $("<p>").text("You don't have any submitted stories!");
        console.log('here')
        $allStoriesList.append($noStoriesMsg);
      }
    });
  } else {
    $trashIcon.addClass("hidden");
  }

function putMyStoriesOnPage() {  
  $allStoriesList.empty();
  hidePageComponents();
  if (currentUser.ownStories.length === 0) { 
    console.log('currentUser')
    console.log('currentUser.ownStories')
    console.log('currentUser.ownStories.length')
    const $noStoriesMsg = $("<p>").text("You don't have any submitted stories!");
    $allStoriesList.append($noStoriesMsg); 
  }
  // loop through all of our user's stories and generate HTML for them
  for (let story of currentUser.ownStories) {
    const $story = generateStoryMarkup(story, true);
    $allStoriesList.append($story);
  }   
  $allStoriesList.show();
}

MODELS.JS:
  async removeStory(user, storyId) {
    const token = user.loginToken;
    await axios({
      url: `${BASE_URL}/stories/${storyId}`,
      method: "DELETE",
      data: { token: token }
    });
    this.stories = this.stories.filter(s => s.storyId !== storyId);
    user.ownStories = user.ownStories.filter(s => s.storyId !== storyId);
    user.favorites = user.favorites.filter(s => s.storyId !== storyId);
  }




